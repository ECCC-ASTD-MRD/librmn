module rpn_comm
  save
  integer MAX_OPTN
  parameter(MAX_OPTN=10)
!
!	domain boundary flags, LOGICAL
!	.true. if a PE(TILE) is on a domain edge
!	all 4 values .true. if single tile
!	normally set by routine rpn_comm_init
!
	logical bnd_east,bnd_west,bnd_north,bnd_south
!        common /bnd/bnd_east,bnd_west,bnd_north,bnd_south
!
!	characteristics of the local PE
!	plus some PE grid topology information
!	normally set by routine rpn_comm_init
!
!  pe_me_world PE number of this PE in MPI_COMM_WORLD
!  pe_me PE number of this PE
!	pe_mex	 x coordinate of this PE in domain (origin 0)
!	pe_mey	 y coordinate of this PE in domain (origin 0)
!	pe_myrow communicator for PEs in same ROW(same pe_mey)
!  pe_mycol communicator for PEs in same COLUMN(same pe_mex)
!  pe_mypeer communicator for PEs with same value of pe_me
!	pe_tot	 total number of PEs involved
!	pe_nx	 number of PEs along x axis
!	pe_ny	 number of PEs along y axis
!	pe_pe0	 PE number of first PE in grid
!	pe_extra flag =1 if pe in compute grid, =0 otherwise
!	pe_grid	 communicator for PEs in grid and out of grid
!       pe_ingrid communicator for PEs in grid
!       pe_outgrid communicator for PEs out of grid
!	pe_bloc	 communicator for internal blocs in grid
!       pe_blocmaster communicator for bloc_corner PEs in grid
!	pe_id	 matrix of PE numbers in grid
!		 pe_me=pe_id(pe_mex,pe_mey)
!	pe_optn  table of options ( option name)
!	pe_opiv  values of integer options
!	pe_oprv  values of real options
!	pe_opcv  values of character options
!
  integer pe_me,pe_mex,pe_mey,pe_myrow,pe_mycol,pe_mypeer,pe_me_world
  integer pe_tot,pe_nx,pe_ny,pe_pe0,pe_extra
  integer pe_gr_extra,pe_gr_myrow,pe_gr_mycol,pe_gr_mypeer
  integer pe_bloc, pe_blocmaster, pe_defgroup
  integer pe_gr_bloc, pe_gr_blocmaster, pe_defcomm
  integer pe_gr_indomm, pe_gr_outdomm, pe_indomm, pe_outdomm
  integer pe_wcomm, pe_gr_wcomm
  integer pe_dommtot, pe_medomm
  integer, allocatable, dimension(:,:) :: pe_id
  integer, allocatable, dimension(:) :: pe_xtab,pe_ytab
  character *4 pe_optn(MAX_OPTN)
  integer pe_opiv(MAX_OPTN)
  real *4 pe_oprv(MAX_OPTN)
  character *4 pe_opcv(MAX_OPTN)
  integer, private :: RESTE
  parameter (RESTE=MAX_OPTN-1)
  data pe_optn/'FILL',RESTE*'    '/
  data pe_opcv/MAX_OPTN*'    '/
  data pe_oprv/MAX_OPTN*0.0/
  data pe_opiv/MAX_OPTN*0/

  integer ord_max,ord_me
  integer, allocatable, dimension(:) :: ord_tab
!
!	GLOBAL information, will be BROADCAST
!
!	WORLD_pe(1) number of PEs along x in grid
!	WORLD_pe(2) number of PEs along y in grid
!
  integer WORLD_pe(2)
!
!	TIMING information
!
  integer TMG_CLOCK, TMG_CPU, TMG_FLOP, TMG_VEC
  parameter(TMG_CLOCK=1,TMG_CPU=2,TMG_VEC=3,TMG_FLOP=4)
  integer TMG_CLOCK_C, TMG_CPU_C
  parameter(TMG_CLOCK_C=5,TMG_CPU_C=6)
  !
  integer MAXTMG,MAXTMGELEM
  parameter (MAXTMG=1024)
  parameter (MAXTMGELEM=8)
  real *8 tmg_tbl(MAXTMGELEM,MAXTMG)
  real *8 tmg_old(MAXTMGELEM),tmg_new(MAXTMGELEM)
  integer tmg_indx
  integer, private :: MAXWDS
  parameter(MAXWDS=MAXTMG*MAXTMGELEM)
  data tmg_indx / 0 /
  data tmg_old /MAXTMGELEM * 0.0/
  data tmg_new /MAXTMGELEM * 0.0/
  data tmg_tbl /MAXWDS * 0.0/


!
!       Subgrid information
!
  logical BLOC_EXIST
  integer BLOC_SIZEX,BLOC_SIZEY, BLOC_MASTER
  integer BLOC_mybloc,BLOC_myblocx,BLOC_myblocy
  integer BLOC_me,BLOC_corner
  integer BLOC_comm_world, bloc_comm_row, bloc_comm_col
!
! Output unit informatin  
!
  integer :: rpn_u=6
  logical :: rpn_ew_ext_l=.false.
!
! Domain type
!
  type domm
     sequence
     character(len=12) nom
     character(len=1024) path
     integer npex, npey
  end type domm
  integer domm_size, domm_num
  type(domm), allocatable, dimension(:) :: pe_domains
  
end module rpn_comm
      
