!/* RMNLIB - Library of useful routines for C and FORTRAN programming
! * Copyright (C) 1975-2001  Division de Recherche en Prevision Numerique
! *                          Environnement Canada
! *
! * This library is free software; you can redistribute it and/or
! * modify it under the terms of the GNU Lesser General Public
! * License as published by the Free Software Foundation,
! * version 2.1 of the License.
! *
! * This library is distributed in the hope that it will be useful,
! * but WITHOUT ANY WARRANTY; without even the implied warranty of
! * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! * Lesser General Public License for more details.
! *
! * You should have received a copy of the GNU Lesser General Public
! * License along with this library; if not, write to the
! * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! * Boston, MA 02111-1307, USA.
! */

	SUBROUTINE RPN_COMM_xch_halo(g,minx,maxx,miny,maxy,
     %             ni,nj,nk,halox,haloy,periodx,periody,
     %             gni,npol_row)
	use rpn_comm
	implicit none
!
!	exchange a halo with neighbours
!

	integer minx,maxx,miny,maxy,ni,nj,nk,halox,haloy
	integer gni,npol_row
	logical periodx,periody
!	integer *8 mem_time, exch_time, ewtime
	integer g(minx:maxx,miny:maxy,nk)
!
	
	include 'mpif.h'
!
!	integer *8 time_base,temp_time
	integer halo_to_east(halox,nj,nk),halo_to_west(halox,nj,nk)
	integer halo_from_east(halox,nj,nk),halo_from_west(halox,nj,nk)
	integer halo_to_north(1-halox:ni+halox,haloy,nk)
	integer halo_to_south(1-halox:ni+halox,haloy,nk)
	integer halo_from_north(1-halox:ni+halox,haloy,nk)
	integer halo_from_south(1-halox:ni+halox,haloy,nk)
!
	integer i, j, k, m
	integer nwds
	integer sendtag, gettag, ierr
	integer status(MPI_STATUS_SIZE)
	logical east,west,north,south
	integer eastpe,westpe,northpe,southpe
!
	integer globalni,polarrows
!
	integer land_fill
	real r_land_fill
	equivalence(land_fill,r_land_fill)
!

	globalni=abs(gni)
	polarrows=npol_row

1	continue
	
	call RPN_COMM_tmg_in
	east=(bnd_east) .and. (.not.periodx)
	eastpe=pe_id(pe_mex+1,pe_mey)
	west=(bnd_west) .and. (.not.periodx)
	westpe=pe_id(pe_mex-1,pe_mey)
	north=(bnd_north) .and. (.not.periody)
	northpe=pe_id(pe_mex,pe_mey+1)
	south=(bnd_south) .and. (.not.periody)
	southpe=pe_id(pe_mex,pe_mey-1)
!
	if(pe_opcv(1) .ne. ' ') then       !  fill halo option present

	r_land_fill=pe_oprv(1)
	if(pe_opcv(1) .eq. 'BAND') then
	if(iand(1,pe_opiv(1)) .ne. 0) then ! south band
              do j=miny,0
	        do k=1,nk
	        do i=minx,maxx
	          g(i,j,k)=land_fill
	        enddo
	        enddo
	      enddo
	    endif
	    if(iand(2,pe_opiv(1)) .ne. 0) then  ! east band
	      do i=ni+1,maxx
	        do j=miny,maxy
	        do k=1,nk
	          g(i,j,k)=land_fill
	        enddo
	      enddo
	      enddo
	    endif
	    if(iand(4,pe_opiv(1)) .ne. 0) then  ! north band
	      do j=nj+1,maxy
	        do k=1,nk
	        do i=minx,maxx
	          g(i,j,k)=land_fill
	        enddo
	        enddo
	      enddo
	    endif
	    if(iand(8,pe_opiv(1)) .ne. 0) then  ! west band
	      do i=minx,0
	        do j=miny,maxy
	        do k=1,nk
	          g(i,j,k)=land_fill
	        enddo
	      enddo
	      enddo
	    endif
	  endif
	  if(pe_opcv(1) .eq. 'EDGE') then
            if(iand(1,pe_opiv(1)) .ne. 0) then  ! south edge
	      do i=minx,0
	        do k=1,nk
	          g(i,1,k)=land_fill
	        enddo
	      enddo
	      do i=ni+1,maxx
	        do k=1,nk
	          g(i,1,k)=land_fill
	        enddo
	      enddo
	    endif
	    if(iand(2,pe_opiv(1)) .ne. 0) then  ! east edge
	      do j=miny,0
	        do k=1,nk
	          g(ni,j,k)=land_fill
	        enddo
	      enddo
	      do j=nj+1,maxy
	        do k=1,nk
	          g(ni,j,k)=land_fill
	        enddo
	      enddo
	    endif
	    if(iand(4,pe_opiv(1)) .ne. 0) then  ! north edge
	      do i=minx,0
	        do k=1,nk
	          g(i,nj,k)=land_fill
	        enddo
	      enddo
	      do i=ni+1,maxx
	        do k=1,nk
	          g(i,nj,k)=land_fill
	        enddo
	      enddo
	    endif
	    if(iand(8,pe_opiv(1)) .ne. 0) then  ! west edge
	      do j=miny,0
	        do k=1,nk
	          g(1,j,k)=land_fill
	        enddo
	      enddo
	      do j=nj+1,maxy
	        do k=1,nk
	          g(1,j,k)=land_fill
	        enddo
	      enddo
	    endif
	  endif
	endif

!
!       if no halo along x, bypass
	if (halox .eq. 0) goto 2222
!
!       take care of the periodic one processor case
!
	if ( pe_nx.eq.1 ) then
	  if(periodx) then
	    do k=1,nk
	    do j=1,nj
	    do m=1,halox
	      g(m-halox,j,k)=g(ni+m-halox,j,k)
	      g(ni+m,j,k)=g(m,j,k)
	    enddo
	    enddo
	    enddo
	  endif
	  goto 2222
	endif
!
!  extract east and west halos simultaneously (cache usage)
!
!	exch_time=0
!	mem_time=0
!	temp_time=time_base()
	if(halox.eq.4)then
	  do k=1,nk
	  do j=1,nj
	    halo_to_east(1,j,k)=g(ni+1-halox,j,k)
	    halo_to_west(1,j,k)=g(1         ,j,k)
	    halo_to_east(2,j,k)=g(ni+2-halox,j,k)
	    halo_to_west(2,j,k)=g(2         ,j,k)
	    halo_to_east(3,j,k)=g(ni+3-halox,j,k)
	    halo_to_west(3,j,k)=g(3         ,j,k)
	    halo_to_east(4,j,k)=g(ni+4-halox,j,k)
	    halo_to_west(4,j,k)=g(4         ,j,k)
	  enddo
	  enddo
	elseif(halox.eq.3)then
	  do k=1,nk
	  do j=1,nj
	    halo_to_east(1,j,k)=g(ni+1-halox,j,k)
	    halo_to_west(1,j,k)=g(1         ,j,k)
	    halo_to_east(2,j,k)=g(ni+2-halox,j,k)
	    halo_to_west(2,j,k)=g(2         ,j,k)
	    halo_to_east(3,j,k)=g(ni+3-halox,j,k)
	    halo_to_west(3,j,k)=g(3         ,j,k)
	  enddo
	  enddo
	elseif(halox.eq.2)then
	  do k=1,nk
	  do j=1,nj
	    halo_to_east(1,j,k)=g(ni+1-halox,j,k)
	    halo_to_west(1,j,k)=g(1         ,j,k)
	    halo_to_east(2,j,k)=g(ni+2-halox,j,k)
	    halo_to_west(2,j,k)=g(2         ,j,k)
	  enddo
	  enddo
	elseif(halox.eq.1)then
	  do k=1,nk
	  do j=1,nj
	    halo_to_east(1,j,k)=g(ni+1-halox,j,k)
	    halo_to_west(1,j,k)=g(1         ,j,k)
	  enddo
	  enddo
	else
	  do k=1,mod(nk,2)
	  do j=1,nj
	  do m=1,halox
	    halo_to_east(m  ,j,k  )=g(ni+m  -halox,j,k  )
	    halo_to_west(m  ,j,k  )=g(m  ,j,k  )
	  enddo
	  enddo
	  enddo
	  do k=1+mod(nk,2),nk,2
	  do j=1,nj
	  do m=1,halox
	    halo_to_east(m  ,j,k  )=g(ni+m  -halox,j,k  )
	    halo_to_west(m  ,j,k  )=g(m  ,j,k  )
	    halo_to_east(m  ,j,k+1)=g(ni+m  -halox,j,k+1)
	    halo_to_west(m  ,j,k+1)=g(m  ,j,k+1)
	  enddo
	  enddo
	  enddo
	endif
!	mem_time=mem_time+time_base()-temp_time
!
!  process west to east move
!	

!	temp_time=time_base()
!
	nwds=halox*nj*nk
	sendtag=pe_medomm
	gettag=westpe
!
	if(west) then
!	  send to east_neighbor
	  if(.not.east)then
	    call MPI_SEND(halo_to_east,nwds,MPI_INTEGER,eastpe,
     %	         sendtag,PE_DEFCOMM,ierr)
	  endif
	else if(east) then
!	  receive from west_neighbor
	  call MPI_RECV(halo_from_west,nwds,MPI_INTEGER,westpe,
     %	       gettag,PE_DEFCOMM,status,ierr)
	else
!	  send to east_neighbor and receive from west_neighbor
	  call MPI_SENDRECV(
     %         halo_to_east,nwds,MPI_INTEGER,eastpe,sendtag,
     %         halo_from_west,nwds,MPI_INTEGER,westpe,gettag,
     %	       PE_DEFCOMM,status,ierr)
	endif
!
!
!  process east to west move
!
	nwds=halox*nj*nk
	sendtag=pe_medomm
	gettag=eastpe
!
	
	if(east) then
!	  send to west_neighbor
	  if(.not.west) then
	    call MPI_SEND(halo_to_west,nwds,MPI_INTEGER,westpe,
     %	         sendtag,PE_DEFCOMM,ierr)
	  endif
	else if(west) then
!	  receive from east_neighbor
	  call MPI_RECV(halo_from_east,nwds,MPI_INTEGER,eastpe,
     %	       gettag,PE_DEFCOMM,status,ierr)
	else
!	  send to west_neighbor and receive from east_neighbor
	  call MPI_SENDRECV(
     %         halo_to_west,nwds,MPI_INTEGER,westpe,sendtag,
     %	       halo_from_east,nwds,MPI_INTEGER,eastpe,gettag,
     %	       PE_DEFCOMM,status,ierr)
	endif
!	exch_time=exch_time+time_base()-temp_time
!
!  put halos back into array simultaneously (cache usage)
!
!	temp_time=time_base()
	if(halox.eq.4)then
	  do k=1,nk
	  do j=1,nj
	    if(.not.west)then
	      g(-3,j,k)=halo_from_west(1,j,k)
	      g(-2,j,k)=halo_from_west(2,j,k)
	      g(-1,j,k)=halo_from_west(3,j,k)
	      g( 0,j,k)=halo_from_west(4,j,k)
	    endif
	    if(.not.east)then
	      g(ni+1,j,k)=halo_from_east(1,j,k)
	      g(ni+2,j,k)=halo_from_east(2,j,k)
	      g(ni+3,j,k)=halo_from_east(3,j,k)
	      g(ni+4,j,k)=halo_from_east(4,j,k)
	    endif
	  enddo
	  enddo
	elseif(halox.eq.3)then
	  do k=1,nk
	  do j=1,nj
	    if(.not.west)then
	      g(-2,j,k)=halo_from_west(1,j,k)
	      g(-1,j,k)=halo_from_west(2,j,k)
	      g( 0,j,k)=halo_from_west(3,j,k)
	    endif
	    if(.not.east)then
	      g(ni+1,j,k)=halo_from_east(1,j,k)
	      g(ni+2,j,k)=halo_from_east(2,j,k)
	      g(ni+3,j,k)=halo_from_east(3,j,k)
	    endif
	  enddo
	  enddo
	elseif(halox.eq.2)then
	  do k=1,nk
	  do j=1,nj
	    if(.not.west)then
	      g(-1,j,k)=halo_from_west(1,j,k)
	      g( 0,j,k)=halo_from_west(2,j,k)
	    endif
	    if(.not.east)then
	      g(ni+1,j,k)=halo_from_east(1,j,k)
	      g(ni+2,j,k)=halo_from_east(2,j,k)
	    endif
	  enddo
	  enddo
	elseif(halox.eq.1)then
	  do k=1,nk
	  do j=1,nj
	    if(.not.west)then
	      g( 0,j,k)=halo_from_west(1,j,k)
	    endif
	    if(.not.east)then
	      g(ni+1,j,k)=halo_from_east(1,j,k)
	    endif
	  enddo
	  enddo
	else
	  do k=1,mod(nk,2)
	  do j=1,nj
	    if(.not.west)then
	      do m=1,halox
	        g(m-halox,j,k  )=halo_from_west(m,j,k  )
	      enddo
	    endif
	    if(.not.east)then
	      do m=1,halox
	        g(ni+m,j,k  )=halo_from_east(m,j,k  )
	      enddo
	    endif
	  enddo
	  enddo
	  do k=1+mod(nk,2),nk,2
	  do j=1,nj
	    if(.not.west)then
	      do m=1,halox
	        g(m-halox,j,k  )=halo_from_west(m,j,k  )
	        g(m-halox,j,k+1)=halo_from_west(m,j,k+1)
!	        g(m-halox,j,k+2)=halo_from_west(m,j,k+2)
!	        g(m-halox,j,k+3)=halo_from_west(m,j,k+3)
	      enddo
	    endif
	    if(.not.east)then
	      do m=1,halox
	        g(ni+m,j,k  )=halo_from_east(m,j,k  )
	        g(ni+m,j,k+1)=halo_from_east(m,j,k+1)
!	        g(ni+m,j,k+2)=halo_from_east(m,j,k+2)
!	        g(ni+m,j,k+3)=halo_from_east(m,j,k+3)
	      enddo
	    endif
	  enddo
	  enddo
	endif
!	mem_time=mem_time+time_base()-temp_time
!	ewtime=ewtime+mem_time
!
2222	continue
!
!       Si haloy nul, on passe. Si un seul processeur et
!       periodicite, on fait le passage des halos sans MPI
!
	if (haloy .eq. 0) goto 1111
	  if ( pe_ny.eq.1 ) then 
	    if(periody)then
	    do k=1,nk
	    do m=1,haloy
	    do i=1-halox,ni+halox
	      g(i,nj+m,k)=g(i,m,k)
	      g(i,m-haloy,k)=g(i,nj+m-haloy,k)
	    enddo
	    enddo
	    enddo
          endif
	  goto 1111
	endif
!
!
!  process north to south move
!
!	temp_time=time_base()
	do k=1,nk
	do m=1,haloy
	do i=1-halox,ni+halox
	  halo_to_south(i,m,k  )=g(i,m,k  )
 	  halo_to_north(i,m,k  )=g(i,nj+m-haloy,k  )
	enddo
	enddo
	enddo
!	mem_time=mem_time+time_base()-temp_time
!	temp_time=time_base()

	nwds=nk*haloy*(2*halox+ni)
	sendtag=pe_medomm
	gettag=northpe
	if(north) then
!	  send to south_neighbor
	  if(.not.south)then
	    call MPI_SEND(halo_to_south,nwds,MPI_INTEGER,southpe,
     %	         sendtag,PE_DEFCOMM,ierr)
	  endif
	else if(south) then
!	  receive from north_neighbor
	  call MPI_RECV(halo_from_north,nwds,MPI_INTEGER,northpe,
     %	       gettag,PE_DEFCOMM,status,ierr)
	else
!	  send to south_neighbor and receive from north_neighbor
	  call MPI_SENDRECV(
     %        halo_to_south,nwds,MPI_INTEGER,southpe,sendtag,
     %	      halo_from_north,nwds,MPI_INTEGER,northpe,gettag,
     %	       PE_DEFCOMM,status,ierr)
	endif
!	exch_time=exch_time+time_base()-temp_time
! 	temp_time=time_base()
 	if(.not.north)then
 	do k=1,nk
 	do m=1,haloy
 	do i=1-halox,ni+halox
 	  g(i,nj+m,k  )=halo_from_north(i,m,k  )
 	enddo
 	enddo
 	enddo
 	endif
! 	mem_time=mem_time+time_base()-temp_time
!
!
!  process south to north move
!
!	temp_time=time_base()
!	do k=1,nk
!	do m=1,haloy
!	do i=1-halox,ni+halox
!	  halo_to_north(i,m,k  )=g(i,nj+m-haloy,k  )
!	enddo
!	enddo
!	enddo
!	mem_time=mem_time+time_base()-temp_time
	
!	temp_time=time_base()
	nwds=nk*haloy*(2*halox+ni)
	sendtag=pe_medomm
	gettag=southpe
	if(south) then
!	send to north neighbor   
	  if(.not.north)then
	    call MPI_SEND(halo_to_north,nwds,MPI_INTEGER,northpe,
     %	         sendtag,PE_DEFCOMM,ierr)
	  endif
	else if(north) then
!	  receive from south_neighbor
	  call MPI_RECV(halo_from_south,nwds,MPI_INTEGER,southpe,
     %	       gettag,PE_DEFCOMM,status,ierr)
	else
!	  send to north_neighbor and receive from south_neighbor
	  call MPI_SENDRECV(
     %         halo_to_north,nwds,MPI_INTEGER,northpe,sendtag,
     %	       halo_from_south,nwds,MPI_INTEGER,southpe,gettag,
     %	       PE_DEFCOMM,status,ierr)
	endif
!	exch_time=exch_time+time_base()-temp_time

!	temp_time=time_base()
!	if(.not.north .and. .not.south)then
!	do k=1,nk
!	do m=1,haloy
!	do i=1-halox,ni+halox
!	  g(i,nj+m,k  )=halo_from_north(i,m,k  )
!	  g(i,m-haloy,k  )=halo_from_south(i,m,k  )
!	enddo
!	enddo
!	enddo
!	else
!	if(.not.north)then
!	do k=1,nk
!	do m=1,haloy
!	do i=1-halox,ni+halox
!	  g(i,nj+m,k  )=halo_from_north(i,m,k  )
!	enddo
!	enddo
!	enddo
!	endif
	if(.not.south)then
	do k=1,nk
	do m=1,haloy
	do i=1-halox,ni+halox
	  g(i,m-haloy,k  )=halo_from_south(i,m,k  )
	enddo
	enddo
	enddo
	endif
!	endif
!	mem_time=mem_time+time_base()-temp_time
!
1111	continue
!
	return


	entry xch_halo(g,minx,maxx,miny,maxy,
     %             ni,nj,nk,halox,haloy,periodx,periody)
	globalni=ni
	polarrows=0

	goto 1
	end
