*#ifdef NO_MPI
	subroutine MPI_INITIALIZED(mpi_started,ierr)
	use rpn_comm
	implicit none
*
	include 'mpif.h'
*
	logical mpi_started
	integer ierr
*
c	data pe_tot /-1/
*
	ierr=MPI_SUCCESS
	mpi_started=.false.
	return
	end
	subroutine MPI_COMM_SIZE(comm,pe_tot,ierr)
	implicit none
*
	include 'mpif.h'
*
	integer comm,pe_tot,ierr
	ierr=MPI_SUCCESS
	pe_tot=1
	return
	end
	subroutine MPI_GROUP_SIZE(comm,pe_tot,ierr)
	implicit none
*
	include 'mpif.h'
*
	integer comm,pe_tot,ierr
	ierr=MPI_SUCCESS
	pe_tot=1
	return
	end
	subroutine MPI_COMM_RANK(comm,pe_me,ierr)
	implicit none
*
	include 'mpif.h'
*
	integer comm,pe_me,ierr
	ierr=MPI_SUCCESS
	pe_me=0
	return
	end
	subroutine MPI_GROUP_RANK(comm,pe_me,ierr)
	implicit none
*
	include 'mpif.h'
*
	integer comm,pe_me,ierr
	ierr=MPI_SUCCESS
	pe_me=0
	return
	end
	subroutine MPI_init(ierr)
	use rpn_comm
	implicit none
*
	include 'mpif.h'
*
	integer ierr
	ierr=0
c	if(pe_tot .ne. -1) call ABORT
	pe_tot=0
	return
	end
	subroutine MPI_bcast(i,j,k,l,m,ierr)
	implicit none
*
	include 'mpif.h'
*
	integer i,j,k,l,m,ierr
	ierr=MPI_SUCCESS
	return
	end
	subroutine MPI_barrier(i,ierr)
	implicit none
	include 'mpif.h'
	integer i,ierr
	ierr=MPI_SUCCESS
	return
	end
	subroutine MPI_allreduce(send,recv,ni,l,m,n,ierr)
	implicit none
*
	include 'mpif.h'
*
	integer i,l,m,n,ierr
	integer send(*),recv(*),ni
	do i=1,ni
	  recv(i)=send(i)
	enddo
	ierr=MPI_SUCCESS
	return
	end


	subroutine MPI_reduce(send,recv,ni,l,m,n,o,ierr)
	implicit none
*
	include 'mpif.h'
*
	integer i,l,m,n,o,ierr
	integer send(*),recv(*),ni
	do i=1,ni
	  recv(i)=send(i)
	enddo
	ierr=MPI_SUCCESS
	return
	end
	subroutine MPI_finalize
	return
	end
	subroutine MPI_recv
	use rpn_comm
	write(rpn_u,*) 
     %         'MPI_recv not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end
	subroutine MPI_send
	use rpn_comm
	write(rpn_u,*) 
     %         'MPI_send not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end
	subroutine MPI_irecv
	use rpn_comm
	write(rpn_u,*) 
     %         'MPI_irecv not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end
	subroutine MPI_isend
	use rpn_comm
	write(rpn_u,*) 
     %         'MPI_isend not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end
	subroutine MPI_ssend
	use rpn_comm
	write(rpn_u,*) 
     %         'MPI_ssend not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end
	REAL*8 function  MPI_wtime()
	MPI_wtime=0
	return
	end
	subroutine MPI_comm_split(i,j,k,newcomm,ierr)
	implicit none
	integer i,j,k,newcomm,ierr
*
	include 'mpif.h'
*
	newcomm=-1
	ierr=MPI_SUCCESS
	return
	end
	subroutine MPI_comm_group(i,group,ierr)
	implicit none
	integer i,group,ierr
*
	include 'mpif.h'
*
	group=-1
	ierr=MPI_SUCCESS
	return
	end
	subroutine MPI_alltoall
	use rpn_comm
	write(rpn_u,*)
     %         'MPI_alltoall not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end
	subroutine MPI_sendrecv
	use rpn_comm
	write(rpn_u,*) 
     %         'MPI_sendrecv not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end
	subroutine MPI_allgather
	use rpn_comm
	write(rpn_u,*) 
     %         'MPI_allgather not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end
	subroutine MPI_gather(a, cnt, b, c, cnt2, d, e, f,g )
	implicit none
	integer a(*),cnt,b,c(*),cnt2,d,e,f,g,i
	do i=1,min(cnt,cnt2)
	   c(i)=a(i)
	enddo
	return
	end

	subroutine MPI_abort
	use rpn_comm
	write(rpn_u,*) 'MPI_abort is called, ABORT'
	call ABORT
	return
	end
	subroutine MPI_waitall
	return
	end
	subroutine MPI_wait
	return
	end
	subroutine MPI_get_count
	use rpn_comm
	write(rpn_u,*) 
     %         'MPI_get_count not authorized in non-mpi mode, ABORT'
	call ABORT
	return
	end

	subroutine MPI_GROUP_incl(pe_gr_wcomm, pe_dommtot,proc_indomm,
     %   	   pe_gr_indomm,ierr)
	implicit none
	include 'mpif.h'
	integer pe_gr_wcomm, pe_dommtot,proc_indomm,
     %   	   pe_gr_indomm,ierr
	pe_gr_indomm = 0
	ierr = MPI_SUCCESS
	return
	end
	subroutine mpi_comm_create(pe_indomm,pe_gr_blocmaster, 
     &            pe_blocmaster, ierr)
	implicit none
	include 'mpif.h'
	integer pe_indomm,pe_gr_blocmaster, 
     &            pe_blocmaster, ierr
	pe_blocmaster = 0
	ierr = MPI_SUCCESS
	return
	end

*#endif
