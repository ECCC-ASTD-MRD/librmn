!copyright (C) 2007  MSC-RPN COMM  %%%MEC%%%
!**s/r 
!APIBEGIN
program clib_interface_test
  implicit none
!APIEND
!
!object
!  test fn in clib_interface.c
!author
!  Stephane Chamberland, 2007-08
!revision
!  v0_00 -       - initial version, 
!
!implicits
!#include <rmnlib.hf>
#include "../clib_interface.cdk"
!externals
!** end of rpn-doc sections

  integer, parameter :: MAXITEMS = 4096
  integer :: nitems,ii

  integer myuid
  character(len=4096) :: mystr1,mystr2,mystr3,mystr4,fnname
  character(len=4096),dimension(MAXITEMS) :: mystrarray
  character(len=7),parameter :: OK='OK',FAIL='FAILED'
  !---------------------------------------------------------------------

!     clib_getenv   : get unix env var value
  fnname = 'clib_getenv'
  mystr1 = 'EC_ARCH'
  if (clib_getenv(mystr1,mystr2) == CLIB_OK) then
     print *,OK,trim(fnname),': ',trim(mystr1),'=',trim(mystr2)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  
!     clib_putenv   : set unix env var value
  fnname = 'clib_putenv'
  mystr1 = 'TESTVAR'
  mystr2 = 'myval'
  mystr3 = trim(mystr1)//'='//trim(mystr2)
  if (clib_putenv(trim(mystr3)) == CLIB_OK) then
     if (clib_getenv(mystr1,mystr4) == CLIB_OK) then
        if (trim(mystr4) == trim(mystr2)) then
           print *,OK,trim(fnname)
        else
           print *,FAIL,trim(fnname),': ',trim(mystr4),' != ',trim(mystr2)
        endif
     else
        print *,FAIL,trim(fnname),': cannot get val '
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr3)
  endif

!     clib_realpath : return real, abspath, normalize
  fnname = 'clib_realpath'
  mystr1 = '/usr/lib/../bin/env'
  mystr2 = '/usr/bin/env'
  if (clib_realpath(mystr1,mystr3) == CLIB_OK) then
     if (trim(mystr3) == trim(mystr2)) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),': ',trim(mystr3),' != ',trim(mystr2)
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_fileexist: true if file exist
  fnname = 'clib_fileexist: positive test'
  mystr1 = '/bin/sh'
  if (clib_fileexist(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = 'clib_fileexist: negative test'
  mystr1 = '/bin/sh_759843709'
  if (clib_fileexist(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isreadok : true if read permission is set for user
  fnname = 'clib_isreadok: positive test'
  mystr1 = '/bin/sh'
  if (clib_isreadok(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = 'clib_isreadok: negative test'
  mystr1 = '/lost+found'
  if (clib_isreadok(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_iswriteok: true if write permission
  fnname = 'clib_iswriteok: positive test'
  mystr1 = '/dev/null'
  if (clib_iswriteok(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = 'clib_iswriteok: negative test'
  mystr1 = '/bin/sh'
  if (clib_iswriteok(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isexecok : true is exec permission 
  fnname = 'clib_isexecok: positive test'
  mystr1 = '/bin/sh'
  if (clib_isexecok(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = 'clib_isexecok: negative test'
  mystr1 = '/dev/null'
  if (clib_isexecok(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_getcwd   : get current working directory
  fnname = 'clib_getcwd'
  if (clib_getcwd(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname),': ',trim(mystr1)
  else
     print *,FAIL,trim(fnname)
  endif

!     clib_getuid : get uid
  fnname = 'clib_getuid'
  if (clib_getuid(myuid) == CLIB_OK) then
     print *,OK,trim(fnname),': ',myuid
  else
     print *,FAIL,trim(fnname)
  endif

!     clib_isdir    : true if path is dir
  fnname = 'clib_isdir: positive test '
  mystr1 = '/bin'
  if (clib_isdir(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = 'clib_isdir: negative test '
  mystr1 = '/bin/sh'
  if (clib_isdir(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_islink   : true if path is link
  fnname = 'clib_islink: positive test '
  mystr1 = '/bin/sh'
  if (clib_islink(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = 'clib_islink: negative test '
  mystr1 = '/bin/bash'
  if (clib_islink(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isfifo   : true if path is fifo [pipe?]
!     clib_isfile   : true if path is a regular file
  fnname = 'clib_isfile: positive test '
  mystr1 = '/bin/sh'
  if (clib_isfile(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  print *,'Date of last modification to ',trim(mystr1),'=',clib_mtime(mystr1)
  print *,'Size of ',trim(mystr1),'=',clib_size(mystr1)
  call system('ln -s target1:target2 Target')
  if(clib_readlink('Target',fnname) == CLIB_OK)then
     print *,OK,' Target points to ',trim(fnname)
  else
     print *,FAIL,'cannot read link from Target',' fnname=:',trim(fnname),':'
  endif
  call system('rm -f Target')
  fnname = 'clib_isfile: negative test '
  mystr1 = '/bin'
  if (clib_isfile(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_glob     : get list of files that match pattern in PWD
  fnname = 'clib_glob'
  mystr1 = '/bin/*sh*'
  if (clib_glob(mystrarray,nitems,mystr1,MAXITEMS) == CLIB_OK) then
     if (nitems > 0) then
        print *,OK,trim(fnname),' ',trim(mystr1)
        do ii=1,nitems
           print *,'    ',ii,trim(mystrarray(ii))
        enddo
     else
        print *,FAIL,trim(fnname),' not found ',trim(mystr1)
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_basename : return the last part of path [stripped from dirname]
  fnname = 'clib_basename'
  mystr1 = '/usr/bin/toto'
  mystr2 = 'toto'
  if (clib_basename(mystr1,mystr3) == CLIB_OK) then
     if (trim(mystr3) == trim(mystr2)) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),': ',trim(mystr3),' != ',trim(mystr2)
     endif
  else
     print *,FAIL,trim(fnname)
  endif

!     clib_dirname  : return parent dir of path
  fnname = 'clib_dirname'
  mystr1 = '/usr/bin/toto'
  mystr2 = '/usr/bin'
  if (clib_dirname(mystr1,mystr3) == CLIB_OK) then
     if (trim(mystr3) == trim(mystr2)) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),': ',trim(mystr3),' != ',trim(mystr2)
     endif
  else
     print *,FAIL,trim(fnname)
  endif

!     clib_symlink  : create a symbolic link to an existing file/dir
  fnname = 'clib_symlink'
  mystr1 = '/bin/bash'
  mystr2 = '/tmp/sch_bash'
  if (clib_symlink(mystr1,mystr2) == CLIB_OK) then
     if (clib_islink(mystr2) == CLIB_OK) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),' not a link ',trim(mystr2)
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1),' ',trim(mystr2)
  endif

!     clib_unlink   : remove file/link
  fnname = 'clib_unlink'
  mystr2 = '/tmp/sch_bash'
  if (clib_unlink(mystr2) == CLIB_OK) then
     if (clib_islink(mystr2) == CLIB_ERROR) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),' did not remove ',trim(mystr2)
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr2)
  endif

!     clib_remove   : remove file/link or empty-directory
  fnname = 'clib_remove'
  mystr1 = '/bin/bash'
  mystr2 = '/tmp/sch_bash'
  if (clib_symlink(mystr1,mystr2) == CLIB_OK) then
     if (clib_remove(mystr2) == CLIB_OK) then
        if (clib_islink(mystr2) == CLIB_ERROR) then
           print *,OK,trim(fnname)
        else
           print *,FAIL,trim(fnname),' did not remove ',trim(mystr2)
        endif
     else
        print *,FAIL,trim(fnname),' ',trim(mystr2)
     endif
  else
     print *,'??    ',trim(fnname),' problem procceding to test'
  endif

!     clib_mkdir    : create a new dir
  fnname = 'clib_mkdir'
  mystr1 = '/tmp/sch_dir'
  if (clib_mkdir(mystr1) == CLIB_OK) then
     if (clib_isdir(mystr1) == CLIB_OK) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),' not a dir ',trim(mystr1)
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_rename   : rename file/dir/link
  fnname = 'clib_rename'
  mystr1 = '/tmp/sch_dir'
  mystr2 = '/tmp/sch_dir2'
  if (clib_rename(mystr1,mystr2) == CLIB_OK) then
     if (clib_isdir(mystr1) == CLIB_ERROR .and. &
         clib_isdir(mystr2) == CLIB_OK ) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),' not a dir ',trim(mystr2)
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1),' ',trim(mystr2)
  endif

!     clib_rmdir    : remove empty-directory
  fnname = 'clib_rmdir'
  mystr2 = '/tmp/sch_dir2'
  if (clib_rmdir(mystr2) == CLIB_OK) then
     if (clib_isdir(mystr2) == CLIB_ERROR) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),' did not remove ',trim(mystr1)
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_tolower  : return "in place" a lowercase version of the string
  fnname = 'clib_tolower'
  mystr1 = 'ABC'
  mystr2 = 'abc'
  if (clib_tolower(mystr1) == CLIB_OK) then
     if (mystr1 == mystr2) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),' ',trim(mystr1),' not lowercase'
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_toupper  : return "in place" a uppercase version of the string
  fnname = 'clib_tolower'
  mystr1 = 'abc'
  mystr2 = 'ABC'
  if (clib_toupper(mystr1) == CLIB_OK) then
     if (mystr1 == mystr2) then
        print *,OK,trim(fnname)
     else
        print *,FAIL,trim(fnname),' ',trim(mystr1),' not uppercase'
     endif
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isalnum  : return CLIB_OK if char is alpha or digit
  mystr4 = 'clib_isalnum'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = 'a'
  if (clib_isalnum(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = '-'
  if (clib_isalnum(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isalpha  : return CLIB_OK if char is alpha
  mystr4 = 'clib_isalpha'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = 'a'
  if (clib_isalpha(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = '9'
  if (clib_isalpha(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isblank  : return CLIB_OK if char is space or tab
  mystr4 = 'clib_isblank'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = ' '
  if (clib_isblank(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = 'a'
  if (clib_isblank(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isdigit  : return CLIB_OK if char is digit
  mystr4 = 'clib_isdigit'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = '9'
  if (clib_isdigit(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = 'a'
  if (clib_isdigit(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_islower  : return CLIB_OK if char is lowercase
  mystr4 = 'clib_islower'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = 'a'
  if (clib_islower(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = 'A'
  if (clib_islower(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_ispunct  : return CLIB_OK if char is a punctuation
  mystr4 = 'clib_ispunct'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = '.'
  if (clib_ispunct(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = 'a'
  if (clib_ispunct(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isspace  : return CLIB_OK if char is space, form-feed ('\f'), newline ('\n'), carriage return ('\r'), horizontal tab ('\t'), and vertical tab ('\v')
  mystr4 = 'clib_isspace'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = ' '
  if (clib_isspace(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = '-'
  if (clib_isspace(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isupper  : return CLIB_OK if char is uppercase
  mystr4 = 'clib_isupper'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = 'A'
  if (clib_isupper(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = 'a'
  if (clib_isupper(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif

!     clib_isxdigit : return CLIB_OK if char is hexadecimal digit
  mystr4 = 'clib_isxdigit'
  fnname = trim(mystr4) // ': positive test'
  mystr1 = 'f'
  if (clib_isxdigit(mystr1) == CLIB_OK) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
  fnname = trim(mystr4) // ': negative test'
  mystr1 = 'g'
  if (clib_isxdigit(mystr1) == CLIB_ERROR) then
     print *,OK,trim(fnname)
  else
     print *,FAIL,trim(fnname),' ',trim(mystr1)
  endif
!     clib_chdir    : change working directory
  fnname = 'clib_chdir'
  mystr1 = '/usr/bin'
  if (clib_chdir(mystr1) == CLIB_OK) then
     if (clib_getcwd(mystr2) == CLIB_OK) then
        if (trim(mystr2) == trim(mystr1)) then
           print *,OK,trim(fnname)
        else
           print *,FAIL,trim(fnname),': ',trim(mystr2),' != ',trim(mystr1)
        endif
     else
        print *,FAIL,trim(fnname),': cannot get CWD'
     endif
  else
     print *,FAIL,trim(fnname),' : ',trim(mystr1)
  endif




end program clib_interface_test
