cmake_minimum_required(VERSION 3.19)

include(CMakeFindDependencyMacro)
find_dependency(App REQUIRED PATHS $ENV{rmn_DIR} ${CMAKE_CURRENT_LIST_DIR}/.. ${rmn_ROOT})

macro(rmn_load_targets type)
    if (NOT EXISTS "${rmn_${type}_targets}")
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
            "rmn `${type}` libraries were requested but not found.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
        return()
    endif ()
    include("${rmn_${type}_targets}")
endmacro()

set(rmn_static_targets "${CMAKE_CURRENT_LIST_DIR}/rmn-static-targets.cmake")
set(rmn_shared_targets "${CMAKE_CURRENT_LIST_DIR}/rmn-shared-targets.cmake")


#
# Ensure every requested component is valid and that static and shared
# were not both specified
#
set(rmn_known_comps static shared)
set(rmn_comp_static NO)
set(rmn_comp_shared NO)
foreach (rmn_comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
    if (rmn_comp IN_LIST rmn_known_comps)
        set(rmn_comp_${rmn_comp} YES)
    else ()
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
            "rmn does not recognize component `${rmn_comp}`.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
        return()
    endif ()
endforeach ()

if (rmn_comp_static AND rmn_comp_shared)
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
        "rmn `static` and `shared` components are mutually exclusive.")
    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    return()
endif ()

#
# Load the right file based on
# - component
# - rmn_SHARED_LIBS
# - BUILD_SHARED_LIBS
#
if (rmn_comp_static)
    rmn_load_targets(static)
elseif (rmn_comp_shared)
    rmn_load_targets(shared)
elseif (BUILD_SHARED_LIBS)
    if (EXISTS "${rmn_shared_targets}")
        rmn_load_targets(shared)
    else ()
        rmn_load_targets(static)
    endif ()
else ()
    if (EXISTS "${rmn_static_targets}")
        rmn_load_targets(static)
    else ()
        rmn_load_targets(shared)
    endif ()
endif ()
