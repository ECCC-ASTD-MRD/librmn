if(NOT ${CMAKE_FIND_PACKAGE_NAME}_FOUND)
   set(${CMAKE_FIND_PACKAGE_NAME}_VERSION @PROJECT_VERSION@ CACHE INTERNAL "${CMAKE_FIND_PACKAGE_NAME} version")
   @PACKAGE_INIT@

   cmake_minimum_required(VERSION 3.19)

   function(maybe_message type message)
      if(NOT ${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY )
         message(${type} "${message}")
      endif()
   endfunction()

   macro(load_targets type)
      if (NOT EXISTS "${${CMAKE_FIND_PACKAGE_NAME}_${type}_targets}")
         set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
             "${CMAKE_FIND_PACKAGE_NAME} `${type}` libraries were requested but not found.")
         set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
         return()
      endif ()
      include("${${CMAKE_FIND_PACKAGE_NAME}_${type}_targets}")
   endmacro()

   include(CMakeFindDependencyMacro)
   maybe_message(STATUS "Finding dependency App for ${CMAKE_FIND_PACKAGE_NAME}")
   find_dependency(App REQUIRED PATHS $ENV{${CMAKE_FIND_PACKAGE_NAME}_DIR} ${CMAKE_CURRENT_LIST_DIR}/.. ${${CMAKE_FIND_PACKAGE_NAME}_ROOT})

   set(${CMAKE_FIND_PACKAGE_NAME}_static_targets "${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}-static-targets.cmake")
   set(${CMAKE_FIND_PACKAGE_NAME}_shared_targets "${CMAKE_CURRENT_LIST_DIR}/${CMAKE_FIND_PACKAGE_NAME}-shared-targets.cmake")

   if ("@WITH_OMPI@")
      set(${CMAKE_FIND_PACKAGE_NAME}_targets "${CMAKE_FIND_PACKAGE_NAME}::${CMAKE_FIND_PACKAGE_NAME} ${CMAKE_FIND_PACKAGE_NAME}::${CMAKE_FIND_PACKAGE_NAME}-ompi")
   else()
      set(${CMAKE_FIND_PACKAGE_NAME}_targets "${CMAKE_FIND_PACKAGE_NAME}::${CMAKE_FIND_PACKAGE_NAME}")
   endif()

   # Ensure every requested component is valid and that static and shared
   # were not both specified
   set(${CMAKE_FIND_PACKAGE_NAME}_known_comps static shared)
   set(${CMAKE_FIND_PACKAGE_NAME}_comp_static NO)
   set(${CMAKE_FIND_PACKAGE_NAME}_comp_shared NO)
   set(_shared_or_static static)
   foreach (comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
      if (comp IN_LIST ${CMAKE_FIND_PACKAGE_NAME}_known_comps)
         set(${CMAKE_FIND_PACKAGE_NAME}_comp_${comp} YES)
         set(_shared_or_static ${comp})
      else ()
         set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
               "${CMAKE_FIND_PACKAGE_NAME} does not recognize component `${comp}`")
         set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
         return()
      endif ()
   endforeach ()

   if (${CMAKE_FIND_PACKAGE_NAME}_comp_static AND ${CMAKE_FIND_PACKAGE_NAME}_comp_shared)
      set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
         "${CMAKE_FIND_PACKAGE_NAME} `static` and `shared` components are mutually exclusive")
      set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
      return()
   endif ()

   load_targets(static)
   load_targets(shared)
   add_library(${CMAKE_FIND_PACKAGE_NAME}::${CMAKE_FIND_PACKAGE_NAME} ALIAS ${CMAKE_FIND_PACKAGE_NAME}::${CMAKE_FIND_PACKAGE_NAME}-${_shared_or_static})
   add_library(${CMAKE_FIND_PACKAGE_NAME}::${CMAKE_FIND_PACKAGE_NAME}-ompi ALIAS ${CMAKE_FIND_PACKAGE_NAME}::${CMAKE_FIND_PACKAGE_NAME}-ompi-${_shared_or_static})

   if(NOT ${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY )
      message(STATUS "Found ${CMAKE_FIND_PACKAGE_NAME} ${${CMAKE_FIND_PACKAGE_NAME}_VERSION} in ${PACKAGE_PREFIX_DIR}")
      if(${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
         message(STATUS "Components ${${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS}")
      endif()
      message(STATUS "Imported targets for ${_shared_or_static} libraries: ${${CMAKE_FIND_PACKAGE_NAME}_targets}")
   endif()

   unset(_shared_or_static)
endif()