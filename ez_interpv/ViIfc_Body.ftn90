                                        ! no special treatment needed for doubles
#if real48==single
!!!mod RememberDimensions - a place to remember some data
!
module RememberDimensions
!AUTHOR
!     J.W. Blezius Nov 2003
!
!REVISION
! v1_3    Blezius J.W.          - initial version
! v1_4    Blezius J.W. AUG 2009 - split this file off ViIfc.ftn90
!    ?    Blezius J.W. FEB 2010 - delete the non-extended interface routines
!                                 (they required user access to a module)
!
!OBJECT
!        To remember the dimensions that are set by N_Videfset because they must
!        be used by N_Visint.
!
!!
  implicit none
  save

  integer :: N_iDim, N_jDim             ! horizontal dimensions of interpolation

                                        ! vertical dimensions of the source and
  integer :: N_kSrcDim, N_kDestDim      ! destination arrays
end module RememberDimensions
#endif



!!!mod VerticalGridRepository - a place to hold vertical grids
!
module VerticalGridRepository
!AUTHOR
!     J.W. Blezius Nov 2003
!
!REVISION
! v1_3    Blezius J.W.          - initial version
!
!OBJECT
!        As an alternative to returning a VerticalGrid object to the user, this
!        module provides a place to deposit the object in return for an index
!        that can be returned to the user instead.  On provision of the index
!        obtained from the user to this module, a copy of the object is given
!        back to the caller.  Think of it as a coat check.
!
!NOTES
!        While this module has been written with a capacity for 10 vertical
!        grids, that number could easily be increased.  If the effort were judged
!        to be warranted, using an allocation and release system that number
!        could be increased almost indefinitely.  In this case, higher order
!        bits of the index could be used to ensure that old indices are not used
!        to access defunct objects.
!
!        Because only one repository can be envisioned, the concept of 'this' has
!        not been introduced.
!
!        While the repository can hold only 256 grids at once, the higher order
!        bits of the index are used to ensure that a new grid is not accessed
!        with an old index.  The index is started with a non-zero value in the
!        higher order bits so as to make their value harder to get right by
!        accident.
!
!        This module is used only by this interface file.  It is not intended to
!        be a user interface.
!
!!
    use VerticalGrid_class
    use VerticalInterpolationConstants
    implicit none
    save
    private
    public N_DepositGrid, N_ObtainGrid, N_UndepositGrid

    integer            :: n_next = 7680        ! 0x1E00
    integer, parameter :: n_INDEX_MASK = 63    ! 0x003F
    integer, parameter :: n_MAX = n_INDEX_MASK
    integer            :: n_gridsAvailable = n_MAX

    ! This would be written as an array of an object, if fortran made it easier:
    type(T_VerticalGrid), dimension(0:n_MAX), target :: o_repository
    integer,dimension(0:n_MAX) :: n_keyy ! index, including higher order bits
    logical, dimension(0:n_MAX) :: l_available = .true.

contains



!!!func N_DepositGrid - deposit a grid into the repository
    integer function N_DepositGrid(o_verticalGridPtr, n_indexOut)
!
!AUTHOR
!     J.W. Blezius Nov 2003
!
!REVISION
! v1_3    Blezius J.W. NOV 2003 - initial version
!
!OBJECT
!        To deposit a vertical grid object in the repository.  It should be noted
!        that the grid is copy-deleted into the repository rather than taking
!        just a pointer to it.  The caller relinques its ownership of the
!        original; it is deleted here to reduce the chances of creating a memory
!        leak.
!
!ARGUMENTS
                                        ! This is inout because it will be erased
    type(T_VerticalGridPtr), intent(inout) :: o_verticalGridPtr
    integer, intent(out) :: n_indexOut
!
!!
    external flush
    type(T_VerticalGridPtr) :: o_nextInRepositoryPtr
    integer :: error
    integer :: n_indexBare
    integer :: i
    logical :: l_found

    N_DepositGrid = 0                   ! no error yet
    n_indexOut = 0

                                        ! validate the request
    if(n_gridsAvailable == 0) then
        write(6,*)'Capacity of the vertical-grid repository exceeded: ', n_MAX
        call flush(6)
        N_DepositGrid = N_IFC_VGRID_REPOSITORY_OVERFLOW
        return 
    end if

                                        ! find an available grid
    l_found = .false.
    do i=0,n_INDEX_MASK
        n_next = n_next + 1
        n_indexBare = iand(n_next,n_INDEX_MASK)
        if(l_available(n_indexBare))then
            l_found = .true.
            n_indexOut = n_next
            n_gridsAvailable = n_gridsAvailable - 1

            o_nextInRepositoryPtr%Ptr => o_repository(n_indexBare)
            n_keyy(n_indexBare) = n_indexOut
            l_available(n_indexBare) = .false.

            exit ! exit the do loop
        end if
    end do

    if(.not. l_found)then
        write(6,*)'Space could not be found in the vertical-grid repository:'
        write(6,*)'     ', n_gridsAvailable, ' grids should be available.'
        call flush(6)
        N_DepositGrid = N_IFC_VGRID_REPOSITORY_OVERFLOW
        return
    end if

                                        ! Ensure a valid object
    N_DepositGrid = N_ConstructNull(o_nextInRepositoryPtr, &
                                    o_verticalGridPtr%Ptr%N_numVLevels)
    if (N_DepositGrid /= 0) return

                                        ! Copy the grid and release the original
    o_nextInRepositoryPtr%Ptr = o_verticalGridPtr%Ptr
    call M_ReleaseVerticalGrid(o_verticalGridPtr)

    end function N_DepositGrid



!!!func N_ObtainGrid - obtain a pointer to a grid in the repository
    integer function N_ObtainGrid(n_indexIn, o_verticalGridPtr)
!
!AUTHOR
!     J.W. Blezius Nov 2003
!
!REVISION
! v1_3    Blezius J.W. NOV 2003 - initial version
!
!OBJECT
!        To obtain a vertical grid object from the repository.  It should be
!        noted that a pointer to the grid is returned and not a copy of it.
!
!ARGUMENTS
    integer, intent(in) :: n_indexIn
    type(T_VerticalGridPtr), intent(out) :: o_verticalGridPtr
!
!!
    external flush
    integer :: n_indexBare
    N_ObtainGrid = 0                    ! no error yet

                                        ! validate the request
    n_indexBare = iand(n_indexIn, n_INDEX_MASK)! Strip off the validation key
    if(     n_keyy(n_indexBare) /= n_indexIn &
       .or. l_available(n_indexBare) &
      ) then
        write(6,*)'Invalid index supplied to the vertical-grid repository: ', &
                  n_indexIn
        call flush(6)
        N_ObtainGrid = N_IFC_REPOSITORY_INVALID_INDEX
        return
    end if

                                        ! return the grid
    o_verticalGridPtr%Ptr => o_repository(n_indexBare)

    end function N_ObtainGrid



!!!func N_UndepositGrid - release the space occupied by a grid in the repository
    integer function N_UndepositGrid(n_indexIn)
!
!AUTHOR
!     J.W. Blezius Nov 2003
!
!REVISION
! v1_3    Blezius J.W. NOV 2003 - initial version
!
!OBJECT
!        To allow the space in the repository to be re-used.  Once a grid has
!        been released by a call to this method, it can be re-used to store more
!        grids.
!
!ARGUMENTS
    integer, intent(in) :: n_indexIn
!
!NOTES
!        The bizarre name for this function was chosen so as to make it clearer
!        that the method belongs to the repository class.
!
!!
    external flush
    integer :: n_indexBare
    type(T_VerticalGridPtr) :: o_InRepositoryPtr

    N_UndepositGrid = 0                   ! no error yet

                                        ! validate the request
    n_indexBare = iand(n_indexIn, n_INDEX_MASK)! Strip off the validation key

    if(     n_keyy(n_indexBare) /= n_indexIn &
       .or. l_available(n_indexBare) &
      ) then
        
        write(6,*)'Invalid index supplied to the vertical-grid repository: ', &
                  n_indexIn, '  Release ignored.'
        call flush(6)
    end if

                                        ! release the grid
    o_InRepositoryPtr%Ptr => o_repository(n_indexBare)
    call M_ReleaseVerticalGrid(o_InRepositoryPtr)
    l_available(n_indexBare) = .true.
    n_gridsAvailable = n_gridsAvailable + 1

    end function N_UndepositGrid

end module VerticalGridRepository



!!!func N_ViqkdefIfc_X - module-independent interface to 
!                      VerticalGrid_class%N_Viqkdef
#if real48==double
integer function N_ViqkdefIfc_X8 &
#define ret_value N_ViqkdefIfc_X8
#else
integer function N_ViqkdefIfc_X &
#define ret_value N_ViqkdefIfc_X
#endif
                               (n_VertGridIndex, n_numVLevelsIn, n_gridTypeIn, &
                                r_vLevelIn, r_pTopAvgIn, r_pRefIn, r_rCoefIn)
!
!AUTHOR
!     J.W. Blezius Dec 2002 
!
!REVISION
! v1_0    Blezius J.W.          - initial version
! v1_3    Blezius J.W. OCT 2003 - change name from N_ViqkdefIfc, and change the
!                                 structure parameter to an index
!
!OBJECT
!        To provide an interface to the VerticalGrid class whose only knowledge
!        of the class is an index.  This simplifies the publishing and
!        maintaining of the interface, as well as making it C-callable.
!
!ARGUMENTS
    use VerticalGrid_class
    use VerticalGridRepository
    implicit none

    integer, intent(out) :: n_VertGridIndex
    integer, intent(in)::n_numVLevelsIn ! number of vertical levels in r_vLevelIn
    integer, intent(in) :: n_gridTypeIn ! the type of grid -- see values above

                                        ! the levels, see n_gridTypeIn for units
    real(real48), dimension(n_numVLevelsIn), intent(in) :: r_vLevelIn

    real, intent(in)::r_pTopAvgIn       ! average pressure (mb) at model top
    real, intent(in)::r_pRefIn          ! reference pressure (mb)
    real, intent(in)::r_rCoefIn         ! known as 'expansion co-efficient'
!
!!
    type(T_VerticalGrid), target :: o_Grid
    type(T_VerticalGridPtr):: o_GridPtr
    o_GridPtr%Ptr => o_Grid

    n_VertGridIndex = 0

                                        ! initialize the grid
    ret_value = N_Viqkdef(o_GridPtr, n_numVLevelsIn, n_gridTypeIn, &
                          r_vLevelIn, r_pTopAvgIn, r_pRefIn, r_rCoefIn)

    if(ret_value == 0) then
                                        ! get the grid index
        ret_value = N_DepositGrid(o_GridPtr, n_VertGridIndex)
    end if
#if real48==double
end function N_ViqkdefIfc_X8
#else
end function N_ViqkdefIfc_X
#endif






!!!func N_VidefsetIfc_X - module-INdependent, extended interface to 
!                         VerticalInterpolation_class%N_Videfset
#if real48==double
integer function N_VidefsetIfc_X8 &
#define ret_value N_VidefsetIfc_X8
#else
integer function N_VidefsetIfc_X &
#define ret_value N_VidefsetIfc_X
#endif
                                (n_niIn, n_njIn, n_vGridDestnIndex, &
                                 n_vGridSourceIndex, r_pSurf, r_pTopIn, &
                                 n_numExtArraysIn, n_numExtArraysOut, &
                                 r_ExtArraysIn, r_ExtArraysOut)
!
!AUTHOR
!     J.W. Blezius Dec 2002
!
!REVISION
! v1_0    Blezius J.W.          - initial version
! v1_3    Blezius J.W. OCT 2003 - change name from N_VidefsetIfc, and extend the
!                                 interface; change struct parameter to an index
!
!OBJECT
!        To provide an interface to the class which does not require use'ing the
!        class.
!
!ARGUMENTS
    use VerticalGrid_class
    use VerticalInterpolation_class
    use RememberDimensions
    use VerticalGridRepository
    use VerticalInterpolationConstants
    implicit none

    integer, intent(in)::n_niIn, n_njIn ! size of h grid in the interpolation

                                        ! the indices of the two grids requested
    integer, intent(in) :: n_vGridDestnIndex, &
                           n_vGridSourceIndex

                                        ! surface pressure at each horiz location
    real(real48), dimension(n_niIn, n_njIn), intent(in) :: r_pSurf

                                        ! ceiling pressure for each horiz point
                                        ! required only for eta units
    real(real48), dimension(n_niIn, n_njIn), intent(in) :: r_pTopIn

    integer, intent(in) :: n_numExtArraysIn ! size of the array, r_ExtArraysIn
    integer, intent(in) :: n_numExtArraysOut! size of the array, r_ExtArraysOut
    real(real48), dimension(n_niIn, n_njIn, n_numExtArraysIn), &
                                                    intent(in)  :: r_ExtArraysIn
    real(real48), dimension(n_niIn, n_njIn, n_numExtArraysOut), &
                                                    intent(out) :: r_ExtArraysOut

!WHERE:
!  if 2nd index of r_ExtArraysIn
!     [The first three values are simply passed on to the call-back routines]
!      = 1:  zo,           roughness length
!        2:  ilmo,         inverse of Monin-Obukhov length
!        3:  hBound,       height of the boundary layer
!        4:  latitude,     latitude of the horizontal location
!
!  if 2nd index of r_ExtArraysOut:
!      = TBD:  this argument is for future expansion
!
!NOTES
!
!!
    external flush
                                        ! These are indices into the ExtArrays
    integer, parameter :: n_Z0=1, &
                          n_ILMO=2, &
                          n_H_BOUND=3, &
                          n_LATITUDE=4
    integer :: n_error

    real(real48), dimension(n_niIn, n_njIn) :: r_z0, r_ilmo, r_hBound, r_lat

    type(T_VerticalGridPtr) :: o_vGridDestnPtr, &
                               o_vGridSourcePtr

                                        ! Get pointers to grids from repository
    ret_value = N_ObtainGrid(n_vGridDestnIndex, o_vGridDestnPtr)
    if(ret_value /= 0) return
    ret_value = N_ObtainGrid(n_vGridSourceIndex, o_vGridSourcePtr)
    if(ret_value /= 0) return

                                        ! Keep these data for future reference
    N_iDim     = n_niIn
    N_jDim     = n_njIn
    N_kSrcDim  = o_vGridSourcePtr%Ptr%N_numVLevels
    N_kDestDim = o_vGridDestnPtr%Ptr%N_numVLevels


                                        ! Validate the extension arrays
    if (n_numExtArraysIn /= 4) then
      write(6,*)'N_VidefsetIfc_X requires n_numExtArraysIn=4'
      call flush(6)
      ret_value = N_IFC_INVALID_DIMENSION
      return
    end if
    if (n_numExtArraysOut /= 0) then
      write(6,*)'N_VidefsetIfc_X requires n_numExtArraysOut=0'
      call flush(6)
      ret_value = N_IFC_INVALID_DIMENSION
      return
    end if

    ! Create array sections for the required extension arrays
    r_z0    = r_ExtArraysIn(:,:,n_Z0)      ! roughness length
    r_ilmo  = r_ExtArraysIn(:,:,n_ILMO)    ! inverse of Monin-Obukhov length
    r_hBound= r_ExtArraysIn(:,:,n_H_BOUND) ! height of the boundary layer
    r_lat   = r_ExtArraysIn(:,:,n_LATITUDE)! latitude of the horizontal loc'n

    ret_value = N_Videfset(n_niIn, n_njIn, o_vGridDestnPtr, &
                                 o_vGridSourcePtr, r_pSurf, r_pTopIn, &
                                 r_z0, r_ilmo, r_hBound, r_lat)
#if real48==double
end function N_VidefsetIfc_X8
#else
end function N_VidefsetIfc_X
#endif




#if real48==single
!!!func N_VisintIfc - module-independent interface to 
!                     VerticalInterpolation_class%N_Visint
integer function N_VisintIfc(r_stateOut, r_stateIn, r_derivOut, r_derivIn, &
                             r_extrapGuideDown, r_extrapGuideUp)
!
!AUTHOR
!     J.W. Blezius DEC 2002
!
!REVISION
! v1_0    Blezius J.W.          - initial version
!
!OBJECT
!        To provide an interface to the class which does not require use'ing the
!        class.  This version of the function supports the original interface
!        that has been extended by N_ViqkdefIfc_X.  It is available only with
!        single precision reals.
!
!ARGUMENTS
    use VerticalInterpolation_class
    use RememberDimensions
    use VerticalInterpolationConstants
    implicit none
    real(real48), dimension(N_iDim, N_jDim, N_kDestDim),intent(out) :: r_stateOut
    real(real48), dimension(N_iDim, N_jDim, N_kSrcDim), intent(in)  :: r_stateIn
    real(real48), dimension(N_iDim, N_jDim, N_kDestDim),intent(out) :: r_derivOut
    real(real48), dimension(N_iDim, N_jDim, N_kSrcDim), intent(in)  :: r_derivIn
    real(real48), intent(in) :: r_extrapGuideDown, r_extrapGuideUp
!
!!
    N_VisintIfc = N_Visint(r_stateOut, r_stateIn, r_derivOut, r_derivIn, &
                           r_extrapGuideDown, r_extrapGuideUp)
end function N_VisintIfc
#endif




!!!func N_VisintIfc_X - module-independent, extended, interface to 
!                       VerticalInterpolation_class%N_Visint
#if real48==double
integer function N_VisintIfc_X8 &
#define ret_value N_VisintIfc_X8
#else
integer function N_VisintIfc_X &
#define ret_value N_VisintIfc_X
#endif
                              (r_stateOut, r_stateIn, r_derivOut, r_derivIn, &
                               r_extrapGuideDown, r_extrapGuideUp, &
                               m_slStateValue, m_slFluxGradient, &
                               n_numExtArraysIn, n_numExtArraysOut, &
                               r_ExtArraysIn, r_ExtArraysOut)
!
!AUTHOR
!     J.W. Blezius OCT 2003
!
!REVISION
! v1_3    Blezius J.W. OCT 2003 - initial version:  extend the interface of
!                                 N_VisintIfc
!
!OBJECT
!        To provide an extended interface to the class which does not require
!        use'ing the class.
!
!ARGUMENTS
    use VerticalInterpolation_class
    use RememberDimensions
    use VerticalInterpolationConstants
    implicit none

    real(real48), dimension(N_iDim, N_jDim, N_kDestDim),intent(out) :: r_stateOut
    real(real48), dimension(N_iDim, N_jDim, N_kSrcDim), intent(in)  :: r_stateIn
    real(real48), dimension(N_iDim, N_jDim, N_kDestDim),intent(out) :: r_derivOut
    real(real48), dimension(N_iDim, N_jDim, N_kSrcDim), intent(in)  :: r_derivIn
    real(real48), intent(in) :: r_extrapGuideDown, r_extrapGuideUp

                                        ! s/r to calculate normalized state value
                                        ! at one level within the surface layer
                                        ! ('surface layer' is comprised of the  )
                                        ! (space between the Earth's surface and)
                                        ! (the first model level above it.   )
    external m_slStateValue

                                        ! s/r to calculate the normalized flux,
                                        ! and the gradient w.r.t. z
                                        ! at one level within the surface layer
    external m_slFluxGradient
    integer, intent(in) :: n_numExtArraysIn ! size of the array, r_ExtArraysIn
    integer, intent(in) :: n_numExtArraysOut! size of the array, r_ExtArraysOut
    real(real48), dimension(N_iDim, N_jDim, n_numExtArraysIn), intent(in)  :: &
                                                                   r_ExtArraysIn
    real(real48), dimension(N_iDim, N_jDim, n_numExtArraysOut), intent(out) :: &
                                                                   r_ExtArraysOut

!WHERE:
!  if 2nd index of r_ExtArraysIn
!      = 1-ubound(r_stateOut,3): zDest, ht wrt surface, in m, of sought location
!        + ubound(r_stateIn,3): zSrc,  ht wrt surface, in m, of source location
!        + ubound(r_stateIn,3): r_y_stateIn, y-component of r_stateIn
!        + ubound(r_stateIn,3): r_y_derivIn, y-component of r_derivIn
!
!  if 2nd index of r_ExtArraysOut:
!      = 1-ubound(r_stateOut,3): r_y_stateOut, y-component of r_stateOut
!        + ubound(r_stateOut,3): r_y_derivOut, y-component of r_derivOut
!
!NOTES
!
!!
    external flush

    real(real48), dimension(ubound(r_ExtArraysIn,1), \
                    ubound(r_ExtArraysIn,2), \
                    N_kDestDim)            :: r_zDest, r_y_stateOut, r_y_derivOut
    real(real48), dimension(ubound(r_ExtArraysIn,1), \
                    ubound(r_ExtArraysIn,2), \
                    N_kSrcDim)             :: r_zSrc, r_y_stateIn, r_y_derivIn


                                        ! Check n_numExtArraysIn
    if(      n_numExtArraysIn /= 0 &
       .and. n_numExtArraysIn /= N_kDestDim + N_kSrcDim &
       .and. n_numExtArraysIn /= N_kDestDim + 3*N_kSrcDim) then
      write(6,*)'N_VisintIfc_X requires n_numExtArraysIn to be exactly equal ', &
                'to either:'
      write(6,*)'    0, or'
      write(6,*)'    N_kDestDim + N_kSrcDim = ', N_kDestDim + N_kSrcDim, ' or'
      write(6,*)'    N_kDestDim + 3*N_kSrcDim = ', N_kDestDim + 3*N_kSrcDim
      call flush(6)
      ret_value = N_IFC_INVALID_DIMENSION
      return
    end if

    if(n_numExtArraysIn > 0) then
      ! Create array sections required for surface extrapolation
      r_zDest = r_ExtArraysIn(:, :, 1            : N_kDestDim)
      r_zSrc  = r_ExtArraysIn(:, :, N_kDestDim+1 : N_kDestDim+N_kSrcDim)

      if(n_numExtArraysIn >  N_kDestDim + N_kSrcDim)then
                                        ! Check n_numExtArraysOut: surface wind
        if(n_numExtArraysOut /= 2*N_kDestDim) then
          write(6,*)'N_VisintIfc_X requires n_numExtArraysOut=2*N_kDestDim=', &
                                   2*N_kDestDim
          write(6,*)'              when n_numExtArraysIn=N_kDestDim + ', &
                                   '3*N_kSrcDim=', N_kDestDim + 3*N_kSrcDim
          call flush(6)
          ret_value = N_IFC_INVALID_DIMENSION
          return
        end if

        ! Create array sections required for wind extrapolation
        r_y_stateIn = r_ExtArraysIn(:, :, N_kDestDim+  N_kSrcDim+1 : &
                                             N_kDestDim+2*N_kSrcDim)
        r_y_derivIn = r_ExtArraysIn(:, :, N_kDestDim+2*N_kSrcDim+1 : &
                                             N_kDestDim+3*N_kSrcDim)
        r_y_stateOut = r_ExtArraysOut(:, :, 1            :   N_kDestDim)
        r_y_derivOut = r_ExtArraysOut(:, :, N_kDestDim+1 : 2*N_kDestDim)

        ! Interpolate with surface-wind extrapolation
        ret_value     = N_Visint(r_stateOut, r_stateIn, &
                                 r_derivOut, r_derivIn, &
                                 r_extrapGuideDown, r_extrapGuideUp, &
                                 m_slStateValue, m_slFluxGradient, &
                                 r_zDest, r_zSrc, &
                                 r_y_stateOut, r_y_stateIn, &
                                 r_y_derivOut, r_y_derivIn)
                                        ! Copy results to output argument
        r_ExtArraysOut(:, :, 1            :   N_kDestDim) = r_y_stateOut
        r_ExtArraysOut(:, :, N_kDestDim+1 : 2*N_kDestDim) = r_y_derivOut
      else
                                        ! Check n_numExtArraysOut: surface
        if(n_numExtArraysOut /= 0) then
          write(6,*)'N_VisintIfc_X requires n_numExtArraysOut=0'
          write(6,*)'              when n_numExtArraysIn=N_kDestDim + ', &
                                   '3*N_kSrcDim=', N_kDestDim + 3*N_kSrcDim
          call flush(6)
          ret_value = N_IFC_INVALID_DIMENSION
          return
        end if

        ! Interpolate with surface extrapolation
        ret_value     = N_Visint(r_stateOut, r_stateIn, &
                                 r_derivOut, r_derivIn, &
                                 r_extrapGuideDown, r_extrapGuideUp, &
                                 m_slStateValue, m_slFluxGradient, &
                                 r_zDest, r_zSrc)
      end if
    else
                                        ! Check n_numExtArraysOut: non-extended
      if(n_numExtArraysOut /= 0) then
        write(6,*)'N_VisintIfc_X requires n_numExtArraysOut=0'
        write(6,*)'              when n_numExtArraysIn=0'
        call flush(6)
        ret_value = N_IFC_INVALID_DIMENSION
        return
      end if

      ! Interpolate with the original interface
      ret_value     = N_Visint(r_stateOut, r_stateIn, &
                               r_derivOut, r_derivIn, &
                               r_extrapGuideDown, r_extrapGuideUp, &
                               m_slStateValue, m_slFluxGradient)
    end if

#if real48==double
end function N_VisintIfc_X8
#else
end function N_VisintIfc_X
#endif




                                        ! no special treatment needed for doubles
#if real48==single
!!!func N_VisetoptIfc - module-independent interface to 
!                       VerticalInterpolation_class%N_VisetoptIfc
integer function N_VisetoptIfc(s_option, s_value)
!
!AUTHOR
!     J.W. Blezius DEC 2002
!
!REVISION
! v1_0    Blezius J.W.          - initial version
!
!OBJECT
!        To provide an interface to the class which does not require use'ing the
!        class.
!
!ARGUMENTS
    use VerticalInterpolation_class
    implicit none
    character(len=*), intent(in) :: s_option
    character(len=*), intent(in) :: s_value
!
!!
    N_VisetoptIfc = N_Visetopt(s_option, s_value)
end function N_VisetoptIfc
#endif




!!!func N_VigdrlsIfc - release the space occupied by a grid in the repository
#if real48==double
integer function N_VigdrlsIfc8 &
#define ret_value N_VigdrlsIfc8
#else
integer function N_VigdrlsIfc &
#define ret_value N_VigdrlsIfc
#endif
                             (n_indexIn)
!
!AUTHOR
!     J.W. Blezius DEC 2003
!
!REVISION
! v1_3    Blezius J.W. DEC 2003 - initial version
!
!OBJECT
!        To allow the space in the repository to be re-used.  Once a grid has
!        been released by a call to this method, it can be re-used to store more
!        grids.  This is a public interface to the class method that does the
!        real work.
!
!ARGUMENTS
    use VerticalGridRepository
    implicit none
    integer, intent(in) :: n_indexIn
!
!!
    ret_value = N_UndepositGrid(n_indexIn)
#if real48==double
end function N_VigdrlsIfc8
#else
end function N_VigdrlsIfc
#endif
