
      pure function fa(a1,a2,a3,a4,x,x1,x2,x3) result(f_out)
          use rmn_common
          implicit none
          real(kind = real32), intent(in) :: a1, a2, a3, a4
          real(kind = real32), intent(in) :: x, x1, x2, x3
          real(kind = real32) :: f_out
          f_out = a1 + (x-x1) * (a2 + (x-x2) * (a3 + a4 * (x-x3)))
      end function fa

      pure function fa2(c1,a1,a2) result(f_out)
          use rmn_common
          implicit none
          real(kind = real32), intent(in) :: c1, a1, a2
          real(kind = real32) :: f_out
          f_out = c1 * (a2-a1)
      end function fa2

      pure function fa3(c1,c2,c3,a1,a2,a3) result(f_out)
          use rmn_common
          implicit none
          real(kind = real32), intent(in) :: c1, c2, c3, a1, a2, a3
          real(kind = real32) :: f_out
          f_out = c2 * (c3 * (a3-a2) - c1 * (a2-a1))
      end function fa3

      pure function fa4(c1,c2,c3,c4,c5,c6,a1,a2,a3,a4) result(f_out)
          use rmn_common
          implicit none
          real(kind = real32), intent(in) :: c1, c2, c3, c4, c5, c6
          real(kind = real32), intent(in) :: a1, a2, a3, a4
          real(kind = real32) :: f_out
          f_out = c4 * (c5 * (c6 * (a4-a3) - c3 * (a3-a2)) - c2 * (c3 * (a3-a2) - c1 * (a2-a1)))
      end function fa4
