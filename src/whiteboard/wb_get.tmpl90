#include "WhiteBoard_constants.h"


!> \brief Retrieve a copy of the value associated with key stored in the whiteboard saclar form
function FNCNAME(wb_get_)(key, val, wb) result(status)
    use, intrinsic :: iso_fortran_env
    implicit none
#include "whiteboard_type.hf"

    !> Key identifying the whiteboard entry to get
    character (len = *), intent(in) :: key
    !> Returned value associated with key
    TYPEFORTRAN, intent(out) :: val
    !> WhiteBoard instance.  The global instance is used if one ins't provided
    type(whiteboard), intent(in), optional :: wb
    !> WB_OK on success or error code on failure.  Use WB_IS_OK() to check
    integer :: status

#ifndef INTERFACEONLY
    integer(kind = int64) :: my_wb
#include "f_wb_get_itf.hf"

#ifdef DEBUG
    print *, "TYPELEN = ", TYPELEN
    print *, "FNCNAME(wb_get_)", "(", key, "val, [wb])"
#endif

!$omp critical
    if (present(wb)) then
        my_wb = wb%wb
    else
        my_wb = 0
    endif
    status = f_wb_get(my_wb, key, TYPEWBFORT, TYPELEN, val, 0)
!$omp end critical
#endif
end function


!> \brief Retrieve a copy of the value associated with key stored in the whiteboard array form
function NAMEA(FNCNAME(wb_get_))(key, val, nbval, wb) result(status)
    use, intrinsic :: iso_fortran_env
    implicit none
#include "whiteboard_type.hf"

    !> Key identifying the whiteboard entry to get
    character (len = *), intent(in) :: key
    !> Returned value associated with key
    TYPEFORTRAN, dimension(:), intent(out) :: val
    !> Number of returned values in the array
    integer, intent(out) :: nbval
    !> WhiteBoard instance.  The global instance is used if one ins't provided
    type(whiteboard), intent(in), optional :: wb
    !> WB_OK on success or error code on failure.  Use WB_IS_OK() to check
    integer :: status

#ifndef INTERFACEONLY
    integer(kind = int64) :: my_wb
#define ARRAY
#include "f_wb_get_itf.hf"
#undef ARRAY

#ifdef DEBUG
    print *, "FNCNAME(wb_get_)", "(", key, "val,", nbval, ", [wb])"
#endif

!$omp critical
    if (present(wb)) then
        my_wb = wb%wb
    else
        my_wb = 0
    endif
    nbval  = 0
    status = f_wb_get(my_wb, key, TYPEWBFORT, TYPELEN, val, size(val))
    if (WB_IS_OK(status)) nbval = status
!$omp end critical
!TODO: error when not enough room to get all WB values [not the default]
!!$  if present(mode0) then
!!$     if (status > size(val) .and. mode == ERR_ON_SUB_ARRAY) status = WB_ERR_WRONGDIMENSION
!!$  endif
    return
#endif
end function
