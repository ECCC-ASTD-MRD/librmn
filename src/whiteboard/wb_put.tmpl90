#include "WhiteBoard_constants.h"


!> \brief Save a copy of the value in the whiteboard associated with a key name scalar form
function FNCNAME(wb_put_)(key, val, options0, wb) result(status)
    use, intrinsic :: iso_fortran_env
#ifdef INTERFACEONLY
    import :: whiteboard
#endif
    implicit none

#ifndef INTERFACEONLY
#include "whiteboard_type.hf"
#endif
    !> Key identifying the whiteboard entry to set
    character (len = *), intent(in) :: key
    !> Value associated with key
    TYPEFORTRAN, intent(in) :: val
    !> Define if the value stored is REWRITEABLE or not
    integer, intent(in), optional  :: options0
    !> WhiteBoard instance.  The global instance is used if one ins't provided
    type(whiteboard), intent(in), optional :: wb
    !> Status; use WB_IS_OK(status) to check
    integer :: status

#ifndef INTERFACEONLY
    integer(kind = int64) :: my_wb
    integer :: options
#include "f_wb_put_itf.hf"
#ifdef _OPENMP
    integer, external :: omp_get_num_threads
    if (omp_get_num_threads() > 1) then
        status = WB_ERROR
        return
    endif
#endif

#ifdef DEBUG
    print *, "FNCNAME(wb_put_)", "(", key, "val, [wb])"
#endif

    if (present(options0)) then
        options = options0
    else
        options = WB_REWRITE_NONE
    endif

    if (present(wb)) then
        my_wb = wb%wb
    else
        my_wb = 0
    endif
    status = f_wb_put(my_wb, key, TYPEWBFORT, TYPELEN, val, 0, options)
    return
#endif
end function


!> \brief Save a copy of the values in the whiteboard associated with a key name array form
function NAMEA(FNCNAME(wb_put_))(key, val, options0, wb) result(status)
    use, intrinsic :: iso_fortran_env
#ifdef INTERFACEONLY
    import :: whiteboard
#endif
    implicit none

#ifndef INTERFACEONLY
#include "whiteboard_type.hf"
#endif
    !> Key identifying the whiteboard entry to set
    character(len = *), intent(in) :: key
    !> Value associated with key
    TYPEFORTRAN, dimension(:), intent(in) :: val
    !> Define if value is REWRITEABLE or not
    integer, intent(in), optional :: options0
    !> WhiteBoard instance.  The global instance is used if one ins't provided
    type(whiteboard), intent(in), optional :: wb
    !> Status; use WB_IS_OK(status) to check
    integer :: status

#ifndef INTERFACEONLY
    integer(kind = int64) :: my_wb
    integer :: options
#define ARRAY
#include "f_wb_put_itf.hf"
#undef ARRAY
#ifdef _OPENMP
    integer, external :: omp_get_num_threads
    if (omp_get_num_threads() > 1) then
        status = WB_ERROR
        return
    endif
#endif

#ifdef DEBUG
    print *, "FNCNAME(wb_put_)", "(", key, "val, [wb])"
#endif

    if (size(val) .eq. 0) then
        status = WB_ERROR
        return
    endif
    if (present(options0)) then
        options = options0
    else
        options = WB_REWRITE_NONE
    endif

    if (present(wb)) then
        my_wb = wb%wb
    else
        my_wb = 0
    endif
    status = f_wb_put(my_wb, key, TYPEWBFORT, TYPELEN, val, size(val), options)
    return
#endif
end function
