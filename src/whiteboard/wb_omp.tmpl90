#ifdef INTERFACEONLY
interface wb_read
#endif
    !> \brief Read a dictionary or namelist into the whiteboard
    function wb_read(prefix_name, file, section, mode, wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> Prefix to add to var name found in the config file as WB keyname
        character(len = *), intent(in) :: prefix_name
        !> Config filename to read
        character(len = *), intent(in) :: file
        !> Section name to read in the config file
        character(len = *), intent(in) :: section
        !> Parsing mode of the config file [WB_ALLOW_DEFINE...]
        integer, intent(in) :: mode
        !> WhiteBoard instance.  The global instance is used if one ins't provided
        type(whiteboard), intent(in), optional :: wb
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer(kind = int64) :: my_wb
        integer, external :: f_wb_read
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        if (present(wb)) then
            my_wb = wb%wb
        else
            my_wb = 0
        endif
        status = f_wb_read(my_wb, prefix_name, file, section, mode)
        return
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_keys
#endif
    !> \brief Retreive all key names in the wahitboard starting with key_pattern
    function wb_keys(keys, nkeys, key_pattern, wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> List of found WB key names that start with key_pattern
        character(len = *), dimension(:), intent(out) :: keys
        !> Number of found key name
        integer, intent(out) :: nkeys
        !> Key prefix to match against
        character(len = *), intent(in) :: key_pattern
        !> WhiteBoard instance.  The global instance is used if one ins't provided
        type(whiteboard), intent(in), optional :: wb
        !> Number of matching keys found
        integer :: status

#ifndef INTERFACEONLY
        integer(kind = int64) :: my_wb
        integer, external :: f_wb_get_keys
        !$omp critical
        if (present(wb)) then
            my_wb = wb%wb
        else
            my_wb = 0
        endif
        nkeys = f_wb_get_keys(my_wb, keys, size(keys), key_pattern)
        status = nkeys
        !$omp endcritical
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_get_meta
#endif
    !> \brief Retreive meta data of WB entry conresponding to provided key name
    function wb_get_meta(key, type1, typelen, array_size, options, wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> String identifying the whiteboard entry to get meta from
        character(len = *), intent(in) :: key
        !> Fortran type [WB_FORTRAN_*]
        integer, intent(out) :: type1
        !> Length of the fortran type [4,8,len(string)]
        integer, intent(out) :: typelen
        !> Number of elements in the array; 0=scalar
        integer, intent(out) :: array_size
        !> As they are set in by the put
        integer, intent(out) :: options
        !> WhiteBoard instance.  The global instance is used if one ins't provided
        type(whiteboard), intent(in), optional :: wb
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer(kind = int64) :: my_wb
        integer, external :: f_wb_get_meta
        !$omp critical
        if (present(wb)) then
            my_wb = wb%wb
        else
            my_wb = 0
        endif
        status = f_wb_get_meta(my_wb, key, type1, typelen, array_size, options)
        !$omp end critical
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_checkpoint_setname
#endif
    !> \brief Set the name of the checkpoint file
    function wb_checkpoint_setname(filename) result(status)
        implicit none

        !> Name of the wb checkpoint file
        character(len = *), intent(in) :: filename
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer, external :: f_wb_checkpoint_name
        status = f_wb_checkpoint_name(filename)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_checkpoint_getname
#endif
    !> \brief Get the name of the checkpoint file
    function wb_checkpoint_getname(filename) result(status)
        implicit none

        !> Name of the wb checkpoint file
        character(len = *), intent(out) :: filename
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer, external :: f_wb_checkpoint_get_name
        status = f_wb_checkpoint_get_name(filename)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_checkpoint
#endif
    !> \brief Save a copy of the whiteboard to disk for re-start purpose
    function wb_checkpoint(wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> WhiteBoard instance.  The global instance is used if one ins't provided
        type(whiteboard), intent(in), optional :: wb
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer(kind = int64) :: my_wb
        integer, external :: f_wb_checkpoint
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        if (present(wb)) then
            my_wb = wb%wb
        else
            my_wb = 0
        endif
        status = f_wb_checkpoint(my_wb)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_reload
#endif
    !TODO: may want to remove this and do an auto reload on 1st WB fn call

    !> \brief Force a reload of the saved copy of the whiteboard
    !> If ant, as written by wb_checkpoint; normally done first thing on re-start
    function wb_reload(wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> WhiteBoard instance.  The global instance is used if one ins't provided
        type(whiteboard), intent(in), optional :: wb
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer(kind = int64) :: my_wb
        integer, external :: f_wb_reload
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        if (present(wb)) then
            my_wb = wb%wb
        else
            my_wb = 0
        endif
        status = f_wb_reload(my_wb)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_check
#endif
    !> \brief Check all whiteboard entries for the gien instatus, return number of entries that match
    function wb_check(prefix_match, instatus, wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> Prefix string to match to WB entry key name
        character(len = *), intent(in) :: prefix_match
        !> Status code to check for
        integer, intent(in) :: instatus
        !> WhiteBoard instance.  The global instance is used if one ins't provided
        type(whiteboard), intent(in), optional :: wb
        !> Number of entries that match instatus; error if < 0
        integer :: status

#ifndef INTERFACEONLY
        integer(kind = int64) :: my_wb
        integer, external :: f_wb_check
        !$omp critical
        if (present(wb)) then
            my_wb = wb%wb
        else
            my_wb = 0
        endif
        status = f_wb_check(my_wb, prefix_match, instatus)
        !$omp end critical
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_lock
#endif
    !> \brief Set all whiteboard entry to WB_REWRITE_NONE 
    !> Each entry will be set to WB_REWRITE_NONE if and only if key name start with prefix_match and status is WB_REWRITE_UNTIL
    !> This is normally done after a wb_read of a config file
    function wb_lock(prefix_match, wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> Prefix string to match to WB entry key name
        character(len = *), intent(in) :: prefix_match
        !> WhiteBoard instance.  The global instance is used if one ins't provided
        type(whiteboard), intent(in), optional :: wb
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer(kind = int64) :: my_wb
        integer, external :: f_wb_lock
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        if (present(wb)) then
            my_wb = wb%wb
        else
            my_wb = 0
        endif
        status = f_wb_lock(my_wb, prefix_match)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_error_handler
#endif
    !> \brief Set error callback function
    !> The handler_function should have the following form:
    !>  subtroutine handler_function(error_severity, error_code)
    !>      integer, intent(in) :: error_severity, error_code
    function wb_error_handler(handler_function) result(status)
        implicit none

        !> Status; use WB_IS_OK(status) to check
        integer :: status

        !> Error handler callback
        external :: handler_function

#ifndef INTERFACEONLY
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        status = WB_OK
        call f_wb_error_handler(handler_function)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_broadcast_init
#endif
    !> \brief Configure WhiteBoard MPI broadcasts
    function wb_broadcast_init(pe_root, pe_me, domain, bcst_function, allreduce_function) result(status)
        implicit none

        !> Root procesor number to braodcast from (unused, kept for compatibility only)
        integer, intent(in) :: pe_root
        !> Actual procesor number (unused, kept for compatibility only)
        integer, intent(in) :: pe_me
        !> Communicator "domain" to broadcast to (unused, kept for compatibility only)
        character(len = *) :: domain
        !> "pointer" to an mpi-like broadcast function
        external :: bcst_function
        !> "pointer" to an mpi-like allreduce function
        external :: allreduce_function
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        status = WB_OK
        call f_wb_bcst_init(bcst_function, allreduce_function)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_broadcast
#endif
    !> \brief Perform an MPI broadcast
    function wb_broadcast(key, ispattern, wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> String identifying the whiteboard entry to broadcast
        character(len = *), intent(in)   :: key
        !> If not 0, key is a pattern to match
        integer, intent(in), optional :: ispattern
        !> WhiteBoard instance.  The global instance is used if one ins't provided
        type(whiteboard), intent(in), optional :: wb
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer(kind = int64) :: my_wb
        integer :: ispattern0
        integer, external :: f_wb_bcst
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif

#ifdef DEBUG
    print *, "wb_broadcast", "(", key, ", ...)"
#endif

        if (present(wb)) then
            my_wb = wb%wb
        else
            my_wb = 0
        endif
        if (present(ispattern)) then
            ispattern0 = ispattern
        else
            ispattern0 = 0
        endif
        status = f_wb_bcst(my_wb, key, ispattern0)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_verbosity
#endif
    !> \brief Set the wb verbosity level
    function wb_verbosity(level) result(status)
        implicit none

        !> Verbosity level
        integer, intent(in) :: level
        !> The previously set verbosity level
        integer :: status

#ifndef INTERFACEONLY
        integer, external :: f_wb_verbosity
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        status = f_wb_verbosity(level)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_new
#endif
    !> \brief Create a new whiteboard instance
    function wb_new(wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> New WhiteBoard
        type(whiteboard), intent(out) :: wb
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer, external :: f_wb_new
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        status = f_wb_new(wb%wb)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif


#ifdef INTERFACEONLY
interface wb_free
#endif
    !> \brief Delete a WhiteBoard instance
    function wb_free(wb) result(status)
        use, intrinsic :: iso_fortran_env
        implicit none

#include "whiteboard_type.hf"
        !> The WhiteBoard to delete
        type(whiteboard), intent(inout) :: wb
        !> Status; use WB_IS_OK(status) to check
        integer :: status

#ifndef INTERFACEONLY
        integer, external :: f_wb_free
#ifdef _OPENMP
        integer, external :: omp_get_num_threads
        if (omp_get_num_threads() > 1) then
            status = WB_ERROR
            return
        endif
#endif
        status = f_wb_free(wb%wb)
#endif
    end function
#ifdef INTERFACEONLY
end interface
#endif
