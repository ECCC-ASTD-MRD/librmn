interface gmm_get
    integer function gmm_getmeta2(iname,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        ! attributes (name in attributes is not used)
        type(gmm_metadata), intent(out) :: m
    end function gmm_getmeta2
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3,#4
#define CODE #1;#2;#3;#4
#define DIM 4
#define DATATYPE integer
#define DATACODE 1
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3,#4
#define CODE #1;#2;#3;#4
#define DIM 4
#define DATATYPE integer
#define DATACODE 1
#define DATALENGTH 4
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3,#4
#define CODE #1;#2;#3;#4
#define DIM 4
#define DATATYPE real
#define DATACODE 2
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3,#4
#define CODE #1;#2;#3;#4
#define DIM 4
#define DATATYPE real
#define DATACODE 2
#define DATALENGTH 4
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3,#4
#define CODE #1;#2;#3;#4
#define DIM 4
#define DATATYPE complex
#define DATACODE 3
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3
#define CODE #1;#2;#3
#define DIM 3
#define DATATYPE integer
#define DATACODE 1
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3
#define CODE #1;#2;#3
#define DIM 3
#define DATATYPE integer
#define DATACODE 1
#define DATALENGTH 4
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3
#define CODE #1;#2;#3
#define DIM 3
#define DATATYPE real
#define DATACODE 2
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3
#define CODE #1;#2;#3
#define DIM 3
#define DATATYPE real
#define DATACODE 2
#define DATALENGTH 4
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2,#3
#define CODE #1;#2;#3
#define DIM 3
#define DATATYPE complex
#define DATACODE 3
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2
#define CODE #1;#2
#define DIM 2
#define DATATYPE integer
#define DATACODE 1
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2
#define CODE #1;#2
#define DIM 2
#define DATATYPE integer
#define DATACODE 1
#define DATALENGTH 4
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2
#define CODE #1;#2
#define DIM 2
#define DATATYPE real
#define DATACODE 2
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2
#define CODE #1;#2
#define DIM 2
#define DATATYPE real
#define DATACODE 2
#define DATALENGTH 4
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1,#2
#define CODE #1;#2
#define DIM 2
#define DATATYPE complex
#define DATACODE 3
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1
#define CODE #1
#define DIM 1
#define DATATYPE integer
#define DATACODE 1
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1
#define CODE #1
#define DIM 1
#define DATATYPE integer
#define DATACODE 1
#define DATALENGTH 4
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1
#define CODE #1
#define DIM 1
#define DATATYPE real
#define DATACODE 2
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1
#define CODE #1
#define DIM 1
#define DATATYPE real
#define DATACODE 2
#define DATALENGTH 4
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
#define Cat #1#2#3#4#5#6
#define DIMS #1
#define CODE #1
#define DIM 1
#define DATATYPE complex
#define DATACODE 3
#define DATALENGTH 8
#define EXTENSION Cat(DATACODE,DATALENGTH,DIM)
    integer function Cat(gmm_get,EXTENSION,)(iname,p,m)
!#include "gmm_definitions.inc"
        ! name (partially redundant with attributes)
        character(len=*), intent(in) :: iname
        DATATYPE*DATALENGTH, pointer :: p(DIMS(:,:,:,:))
        ! attributes (name in attributes is not used)
        type(gmm_metadata), optional, intent(out) :: m
    end function Cat(gmm_get,EXTENSION,)
#undef EXTENSION
#undef  Cat
#undef  DIMS
#undef  CODE
#undef  DIM
#undef  DATATYPE
#undef  DATACODE
#undef  DATALENGTH
end interface

interface gmm_delete
    integer function gmm_delete(iname)
        character(len=*), intent(in) :: iname
    end function gmm_delete
end interface
